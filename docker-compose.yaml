version: '3.8'

services:
  backend:
    build:
      context: .
      dockerfile: Dockerfile
    container_name: backend
    ports:
      - "8080:8080"
    depends_on:
      - postgres
      - redis
      - rabbitmq
    restart: unless-stopped
    networks:
      - app-network
  
  postgres:
    image: postgres:15
    container_name: postgres
    environment:
      POSTGRES_USER: postgres
      POSTGRES_PASSWORD: postgres
      POSTGRES_DB: ticketdb
    ports:
      - "5432:5432"
    volumes:
      - pgdata:/var/lib/postgresql/data
    restart: unless-stopped
    networks:
      - app-network
  
  redis:
    image: redis:7
    container_name: redis
    volumes:
      - redis_data:/data
    ports:
      - "6379:6379"
    restart: unless-stopped
    networks:
      - app-network

  rabbitmq:
    image: rabbitmq:3-management
    container_name: rabbitmq
    ports:
      - "5672:5672"
      - "15672:15672"
    environment:
      - RABBITMQ_DEFAULT_USER=guest
      - RABBITMQ_DEFAULT_PASS=guest
    volumes:
    - rabbitmq_data:/var/lib/rabbitmq
    restart: unless-stopped
    networks:
      - app-network
  
  worker:
    build:
      context: .
      dockerfile: Dockerfile_worker
    depends_on:
      - postgres
      - redis
      - rabbitmq
    networks:
      - app-network

  pgweb:
    image: sosedoff/pgweb:latest
    container_name: pgweb
    ports:
      - "8081:8081"
    environment:
      - DATABASE_URL=postgres://postgres:postgres@postgres:5432/ticketdb?sslmode=disable
    depends_on:
      - postgres
    networks:
      - app-network

  redis-commander:
    image: rediscommander/redis-commander:latest
    container_name: redis-commander
    ports:
      - "8082:8081"
    environment:
      - REDIS_HOSTS=local:redis:6379
      - HTTP_USER=root
      - HTTP_PASSWORD=123
    depends_on:
      - redis
    networks:
      - app-network

volumes:
  pgdata:
  redis_data:
  rabbitmq_data:

networks:
  app-network:
    driver: bridge 